
- exit => OK
- ctrl + c => OK
- < end.txt wc -l < file.txt cat
=> Error to handle
- echo '"SALUT'"
=> Quotes are not closed, error to manage
- entree => OK
- Que des espaces : OK
=> Devrait renvoyer a la ligne.
TO TEST : DONE
$> echo hola > bonjour
$> echo hey > hello
$> <bonjour >hello
$> cat bonjour 
$> cat hello

cat > ok 
...
...
cat < ok => DONE
- Gestion env + update => DONE

- > - | - < - \ => DONE
=> Erreurs a gerer pour arreter le prog.

- Minishell>$echo -nnn ------------------n > DONE
malloc(): corrupted top size

Gestion d'erreurs : DONE
Si cmd avec quotes pas fermes ! => Errors.

HERE_DOC SOLO : DONE
=> SEGFAULT

cat | < end.txt : DONE
=> SEGFAULT

echo SALUT > output => Print sur le terminal et pas dans le fichier. => DONE

< ok | cat / wc => why send it to the cmd ? => DONE

<< end | cat => OK

=> DONE !!!
echo COUCOU > ok | < ok cat => doit l'afficher ! => OK
To fix : echo SALUT > output | < input (output before) cat => Taking my first execution !
1. If we find output | input that are the same file
2. We start a child process for the first block
3. Then we wait with the parent process
4. We start again until the last block

pwd | cat | echo => DONE

> Check if it's not a pb for simple exec. + CHECK FOR REDIRECTIONS !!! as we open file twice. => DONE
> + echo -nnnn SALUT TOI > ok | cat ok => Need to also make a special case. => DONE

- Gerer echo SALUT > OK | cat OK => DONE with check_line function because
i'm waiting for each block, so the end of each cmd, then cat can access to ok file.
=> So how to do it ??
- Tester de nouveau les file seuls ! + voir pour append/output or else.
=> DONE : i'm can now verify if there is one file if it exists or not.
=> BUT it's not totally good bce if i have a file & then a pipe, ça
fait la redirection du file sur STDOUT ce qui fait qu'il envoie les données à
cat alors que normalement cat ne reçoit rien.
idée : créer une autre fonction d'output pour l'output seul. => DONE

- Mettre l'env. dans une structure et tout remplacer. => DONE
- Le mettre à jour et pouvoir y accéder, actualisé, à tout moment. => DONE
- Absolute path : => DONE
Checker si abolute path : Si je rencontre un slash alors absolute path !
On va pas chercher le path, on l'envoie direct a execve.

- echo : DONE
>< | echo > < + gestion | | + etc. => OK
=> SEGFAULT
Gerer les erreurs de syntaxe !
echo : 
Si \ alors on skip ce caractere. => OK
syntaxe echo / function => OK

- Parsing : Check des files => Faire toutes les combinaisons : DONE
1. Output output
2. Output append
3. Append append
4. Append output
=> Check si besoin de le faire pour here_doc aussi ?

Exit : DONE
But check if with pipe doesn't work. => OK
exit | ls => Do ls but not exit ! => OK

Unset : DONE
Can't find the var. i've just added. => DONE
Check errors like export. => OK

pwd : DONE
- Errors => OK
- Tester si MAJ dans l'env. => OK

CD : DONE
- Si // on print deux slash avec \n. => OK
- Sinon on print un slash avec \n. => OK
- cd .. => 2 fois SEGFAULT > OK
- cd leaks > OK
- Re-check cd / function. => DONE

export : DONE
- Ne pas afficher la derniere ligne de l'env. => OK
- CHECK : if export value > Then export if the var. is in the env. => OK
- Ne modifie pas une variable qu'on vient de creer avec une nouvelle value. => OK
- LEAKS !! => OK

echoSALUTTOI : Message d'erreur : command not found => DONE
unsetPWD : same => DONE
exit42 : same => DONE
cdLibft/ => bash: cdLibft/: No such file or directory => DONE
exportOK=OK => Rien (continue) => DONE

----------------------------------------------------------------------------------------------------------

- $VAR.ENV.: DONE => TO TEST
Check dans la tokenisation > Checker dans la string : 
1. tant que str & que pas $
2. puis que pas autre $
3. Check si var. d'env. 
4. On modifie
=> Check AVANT la gestion des quotes !

- Try a command like : echo "cat lol.c | cat > lol.c" => DONE
=> Need to put things inside quotes in a node (like option)
& not creating different nodes.
- Absolute path => Check how to manage it

Quotes & Var. d'env : DONE
- D'abord on gere les quotes et ensuite la var. d'env.
=> Par contre il faut gerer les quotes avant et donc reconnaitre
le type de quotes :
- Si simple > c'est une phrase litterale > On garde le texte.
- Si double ou rien > c'est une variable > On change par sa valeur.
Var. Env. : 
- Si entre double quote ou tout seul => On met la valeur de la variable d'env.
- Si entre si;ple quote => On laisse tel quel et on envoie a echo.

---------------------------

- REVOIR FONCTION QUOTES ! => OK ?
On avance de gauche a droite > On check chaque quote,
si un niveau de quote on retire, sinon d'autres dedans,
on affiche ce qu'il y a l'interieur.

Quand guillemets tu ouvres, puis
si meme guillemets et rien avant > on ouvre.
Sinon si meme guillemets > Ferme et i--;
Sinon, on ajoute le texte : 
si i != 0, pb de guillemets.

- Quotes avec $ => Pas besoin des doubles quote pour
avoir la var. d'env.
Par contre, si ne trouve pas => Retire le bout.
=> Gerer dans le parsing : 
- Si tu trouves double quotes & 


- Quotes : DONE
Important => Les quotes doivent être gérés dès le début avant de split la ligne de commande.
1. Mettre la gestion des quotes au début, pour gérer directement l'input.
2. Lui envoyer une string au lieu d'un tableau de tableau !

---------------------------

- Echo : DONE
1. Gérer tous les cas d'erreurs qui n'ont pas été fait (fonction error) => OK
2. Voir comment gérer la var. d'env au parsing (?) => Si existe pas > Retiré de la ligne de cmd.
3. Problème du split à voir => Parce que si var. d'env géré avant + $ > Pas besoin.
=> Si echo a $HOME il print home et pas la var. d'env.
=> Par contre il retire le $.
+ Gerer les quotes avant echo.

---------------------------

Code de sortie : DONE
=> Mettre a jour a chq sortie du programme.
=> Dans le parsing > Remplacer.
> Si code d'erreur tout seul = error
> Si code erreur avec echo > OK

exit : => Tests non concluants.
Free les listes, envoyer minishell en param a exit.

---------------------------
=> DONE
/bin/ls | /bin/cat 
/bin/ls | cat
=> Probleme parsing des que j'ai une cmd avec chemin absolu au debut
puis un pipe la j'ai un espace a la fin sur le premier node clean content.

echo : TO CHECK
Avec variable d'env. n'affiche rien.
+ If var. d'env. pas trouve on i++ et on affiche le mot suivant.

EXIT : NE MARCHE PLUS => DONE
exit | ls

echo SALUT TOI > ok | cat | cat ok => DONE
Because dernier cat a besoin du file ok

-------------------------------------------------

Attention : Si en input j'ai export HOLA=ok le parsing ne me => OK
met pas d'espace !! => mettre espace dans les built_in
=> GERER CA DANS MES BUILT_IN

RAF - LAST WEEK : 
- Norme => DONE
- Refaire tests excel => DONE
- Finir de gérer les quotes => DONE
- Tester la variable d'environnement ! => DONE
- RETEST cd ! + // Checker si / file sinon cmd not found ! => DONE
- RETEST Echo -n for modifications ! => DONE
Tarpin_de_Minishell>echo -ndgs COUCOU
- RETEST export for modifications => DONE
- EXEC : 
Verifier avec access quand absolute path ! => DONE
- TO FIX : DONE
* Absolute path built_in
=> cd / export / exit / unset : Can't be executed 
=> env / pwd / echo : Must be executed

- Skip l'espace du premier bloc reçu ! => Where ? BEFORE EXECVE ! => DONE
- UNSET :
Pouvoir unset une variable quand on met = derriere !!! => DONE
- exit_code function
- Gestion redirection => DONE
> Si input n'existe pas on met un message d'erreur puis on arrete l'execution. (on relance prompt)
Par contre il faut regarder les redirections dans l'ordre de leur apparition.
- echo -nHola => Print tout mais retire le retour a la ligne => DONE
- echo -----------n => Ok but remove the \n ! => DONE
- export Hola => Should be in the env ! => DONE
- pwd + autres caracteres => DONE
- cd / => Ne doit rien print ! Moi je print / => OK
- cd : Si cd only go back to user ! + change pwd. => DONE
- cd : Gerer s'il y a un / apres le nom d'un file => DONE
- RETEST CD ! => DONE
- TEST VAR OF MY ENV. => DONE
- Leaks => DONE
- Export : Split with spaces but is a problem when value of var. with spaces & quotes.
- Export : Si tu mets une var. sans valeur mais avec egal et quelle existe alors tu la vide. => OK
- Echo : echo -n dggd => DONE

- LEAKS : 
TESTER LE LEAK BUILTIN OR NOT BUILTIN ou je dois free(args). => DONE


NORME FONCTIONS : DONE

- Execute_cmd_only => Line 92 > DONE
- Path_to_exec => 
=> Line 44 > DONE
=> Line 75 > DONE
- Exec_builtin => line 46 > DONE
- Execution => Line 119 > NOT NECESSARY IF NOT USED !
- Builtin_export 
=> Line 102 > DONE
=> Line 155 > DONE
- Builtin_cd => Line 76 > DONE
- Cd_utils => line 78 > DONE
- Manage_here_doc => Line 67 > DONE
- Main => Line 100
- Built_in => 
=> Line 117 > DONE
=> Line 191 > DONE
- Echo_utils => Line 52 > DONE
- New_exec => 
=> Line 98 > DONE
=> Line 166 > DONE
- Bultin_echo => Line 58 > DONE


POUR ROMAIN : DONE

void	get_var_of_env(t_final_token *node)

=> Utiliser minishell->env et non get_env !!!

- Ne pas exit quand un file n'est pas bon !


-------------------------------------------------------------

Modification du pwd + caractères => DONE
[18:42]
check cd alone => DONE
[18:42]
check errors excel => DONE (i think)
[18:42]
Check why exit code is manage as a cmd => DONE
[18:43]
Check files : ne pas mettre de EXIT_FAILURE but Return ! => DONE
Export : NO char errors after = ! => DONE
+ Check de quel côté du pipe le exit se fait

- Norme => DONE

NE PAS ENVOYER A L'EXEC : => DONE
Tarpin_de_Minishell>< reheg < rdhr < rehrg cat
bash: reheg No such file or directory
bash: rehrg: No such file or directory
ff
ff
ff
ff
f
f



-----------------
Tarpin_de_Minishell>< a > b cat > hey >> d => DONE

=> Cree pas file 2 !!

cat << ok << lol << ko => DONE
