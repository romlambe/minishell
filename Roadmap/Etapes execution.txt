1. On garde les pipes dans les noeuds, donc noeud avec cmd et arg et noeud avec sep. (pas à compter)
2. Ensuite on va check avec notre liste chaînée les pipes, et on gère les redirections.
3. Puis on met dans un tab. de tab. ce qui nous interesse donc sans pipe et va l'exécuter.


TESTS : 
- < input.txt ls | cat > output.txt => TEST OK
input cmd pipe cmd output 
- < input.txt ls | cat >> output.txt => TEST OK
input cmd pipe cmd append 
- ls | grep e | cat => TEST OK
cmd pipe cmd option pipe cmd
- ls > list.txt => TEST OK
cmd output
- echo "Hello, world!" > output.txt => TEST OK but handle quotes !
cmd option output
- grep "pattern" < input.txt > result.txt => TEST OK BUT sans quotes !!
cmd option input output
- sort > data.txt ==> OK but neet to manage ctrl + d
cmd output
- sort  < data.txt ==> TEST OK
input cmd
- cat file.txt | grep e | cat > output.txt => TEST OK without quotes
cmd option pipe cmd pipe cmd output
- cat << end | grep lol > output.txt => TEST OK
cmd here_doc pipe cmd option output
- cat << end | cat > output.txt => TEST OK
- cat << end => TEST OK
- ls => NOT GOOD => TEST OK
- ls > output.txt => TEST OK
- cat < file.txt | grep e | cat | wc -l | cat > output.txt => TEST OK
- echo "Hello, world!" => OK
- pwd => OK
- date => OK
- whoami => OK
- ls > list.txt => OK
- echo "This is a test" > output.txt => OK
- cat file.txt > copied_file.txt => OK
- sort < data.txt => OK
- cat < input.txt => OK
- grep "pattern" < file.txt => OK
- echo "Additional content" >> output.txt => OK
- date >> log.txt => OK
- ls >> directory_contents.txt => OK
- cat << EOF > file.txt Line 1 Line 2 EOF => 
- ls -la | wc >> file1 => OK
- cat << EOF > file.txt
- 

Expanser : 
Prend la liste chaînée : Clean les quotes, remplacer les var. d'env., built-ins, etc.
=> Check si on remet dans l'ordre des redirections, ici, ou pas ????

Fonctions : 
- Readline
- Chdir
- sigaddset
- add_history
- sigaction
- getenv
- get_cwd
- sigemptyset

Sig ==> Gérer les signaux (ctrl +)
Donc il faut avec ces fonctions recevoir les signaux et le réorienter (voir avec readline)
SAUF ctrl +\ (pas de sig).

Cas d'exception : 
- Guillements entre Guillements
echo '"$PATH"' -> "$PATH" => Pas récuperer la var. d'env.
echo "'$PATH'" -> '/usr/bin:/bin' => Keep quotes but with value of the var.

Redirections dans tous les sens : 
< inputfile grep "e" | wc -l > outputfile
> outputfile grep "e" | wc -l < inputfile
>outputfile grep "e" | wc -l <inputfile => Pas forcèment d'espace avec les chevrons.

Echo et ses arguments : 
Echo affiche tous les arguments qu'on lui donne.
Echo avec bcp de chaînes de caractères, il print tout !

cd : 
../path/path/path/minishell => A gérer et checker !! VOIR SI cd .. ou pas ??

Créer un dossier a, créer un dossier b => Si on va dedans et qu'on supp. a => Segfault.
Si tu mets l'absolute path marche toujours !

$? : 
Persistance de la sortie de la dernière cmd existante

unset : 
Exporter une variable, la unset puis la réexporter !
Si tu unset le path ==> erreur à gérer.